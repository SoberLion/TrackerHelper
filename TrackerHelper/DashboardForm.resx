<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pnlLogo.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>